// c언어 함수와 구조체 중심 >> 동사 >> 절차지향
// c++ 객체지향 객체라는 주어 중심 >> 플레이어 기능은 플레이어 객체에서 모두 관리


// 왜 객체지향을 사용하냐
// 개발만 보자면 절차지향이 효율성이 좋다
// 하지만 유지보수 측면에서는 객체지향이 훨씬 좋다
// c++은 절차 + 객체


// 객체란?
// 나를 제외한(주체) 모든 것은 객체
// 현실에 존재하는 대상 사물을 추상화하여 프로그램 코드로 옮겨놓은 것을 객체라고 한다.


// 추상화란?
// 어떠한 상태에 대해서 관찰자가 느낀, 본 시점 그대로 표현한 것.
// 관찰자가 본 것을 그대로 추출해서 코드로 표현한 것.
// 객체를 관찰(보편적인 것들)하여 데이터(자료, 변수), 기능(함수)으로 표현하는 것
//    ㄴ즉, 변수와 함수를 동시에 관리할 수 있는 자료형 >> 클래스
// 객체를 만들기 위해서는 추상화가 선행된다.
// ex) 코끼리

// 클래스는 사용자 정의형
//     객체 = 인스턴스(메모리) + 클래스(자료형)
// 자료형에 의해 메모리까지 사용된 것을 인스턴스화 한다는 것이다.
// 객체를 만든다는 것은 클래스를 만들고 그 클래스를 기반으로 메모리에 올리는 것을 말한다.


// 클래스의 4가지 속성 ***중요!
// 은닉 ,캡슐, 상속, 다형성


// 추상화를 이루기 위해 클래스가 나왔고,
// 클래스는 4대 속성이 있따. 다형성을 위해! 클래스!


// 객체 + 제네릭(일반화 프로그래밍) = c++
// 일반화 프로그래밍
//   ㄴ코드의 재활용을 위해


// 항상 언제든지 수업한거 복습 철저히하고, 언제든 구현에 사용할 수 있도록 연습연습
// 연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습
// 연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습
// 연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습
// 연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습
// 연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습연습
// 하기
