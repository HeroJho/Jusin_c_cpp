#include <iostream>
using namespace std;

// 절차지향 vs 객체지향
//  ㄴc는 절차, c++ 객체 + 절차, 이후 고급언어들은 객체지향
//  ㄴ절차 : 동사(기능)를 중점 (순서대로!)
//  ㄴ객체 : 기능이 아니라 주어에 중점 (부품으로 코드를 인식)
//  ㄴ절차는 유지보수가 힘듬, 객체는 유지보수가 쉬움(부품처럼 조립해서 사용해서).

// 컴퓨터의 숫자 = 상수 + 변수
// 상수 : 고정된 숫자 (지구에서 약속한 것. 10은 10이다)
//  ㄴ리터럴 상수: 10, 'A'
//  ㄴ심볼릭 상수: 프로그램 코드에 의해서 문법적으로 상수화된 숫자.(전처리, const, enum)
// 변수 : 코드의 흐름에 따라 변할 수 있는 숫자

// 메모리
//  ㄴ종류 : 레지스터 > 캐쉬 > 램(메인 메모리, 가상 메모리) > HDD
//      ㄴcpu기준으로 가까운 순서
//      ㄴ레지스터는 cpu안에 있다, 캐쉬는 애매하다.
//  ㄴHDD: 용량은 최대, 속도는 최저(머니깐)
//  ㄴ램: 코딩에서 젤 중요! 나중에
//  ㄴ캐시: 핵심 정보들(혹은 금방 사용한 것)을 임시적으로 저장하는 곳 -> 똑같은 일을 할 때 빠르게 접속가능
//  ㄴ레지스터: cpu가 한번에 연산할 수 있는 총량(32, 64비트 결정)

// 프로그램은 저장할 공간이 무조건 필요! (2+1=3)
//  ㄴRAM에 저장! (HDD는 느려)

// 컴퓨터의 용량 단위
// bit: 꼬마전구 하나(0이거나 1), 연산시 최소단위
// byte: 꼬마전구 8개(1byte == 8bit)*중요!!!, 저장시 최소단위 
//  ㄴ2^8 >> 256개의 숫자 표현 가능. 2^n
// 1Kb < 1Mb < 1Gb < 1Tb    >> 2^10단위로 용량 증가!

// 컴퓨터는 정수, 소수, 글자를 구분하기 위해서 자료형으로 구분한다! 기본 자료형!
//  ㄴ정수 타입: short(2b), int(4b), long(4b), long long(8b)
//      ㄴ과거에는 int가 4b가 아니였음. long은 안 쓰임.
//  ㄴ소수 타입: float(4), double(8), long double(8 아주 안 쓰임)
//  ㄴ문자 타입: char(1)
//  ㄴ논리 타입: bool(1)
// 자료형에 따라 용량이 다르다!

// signed (자료형)인데 생략됨
//  ㄴ-는 +든 전부 표현가능
// unsigned (자료형)
//  ㄴ+만 표현가능 >> 양수 표현 범위가 2배 늘어남
// unsigned는 정수만 해당되는 얘기!

int main()
{
    int iTemp; // 4byte 공간 사용하겠따!
    //  ㄴ어떤 메모리 공간이든 값이 있어야한다(없으면 없는 공간, 전구가 다 꺼진) > 일단 쓰레기 값을 넣음
    int iDest = 0; // 4byte 공간을 사용하고, 0으로 초기화 한다! 쓰레기 값 ㄴㄴ
    // 즉, 선언과 동시에 초기화를 하자!

    // 변수 이름은 의미 있게 쓰기!

    short uDest = 40000;
    // ㄴ메모리는 순환 구조 >> 최대 숫자 넘어가면 - 값으로 넘어감
    // ㄴunsiged를 붙이는 순간 40000도 저장 가능해짐.

    // 실수 타입 >> 훨씬 더 정밀하게 표현이 가능해짐!

    // 임시 메모리에 int(4b)만큼 할당하고 출력
    cout << 10 << endl;
    // 임시 메모리에 double로(4b)
    cout << 3.14 << endl;
    //  ㄴ소수부 표현 양의 차이 float double
    //  ㄴ부동 소수점 방식으로 표현하기 때문에 오차가 항상 존재!
    //      ㄴ가수부 지수부로 나뉘고 지수부의 차이가 float double
    //      ㄴ둘다 지수부가 많이 차지한다(그래서 소수 표현에 적절함!)
    //  ㄴ게임에서는 float을 많이 사용한다(double은 연산량이 많다 >> 정밀하지만)

    float fDelta = 3.14; //double로 초기화 되고 float으로 변환
    //  ㄴ3.14f  << f를 붙이면 된다. 그럼 float로 공간 확보


    // 문자 타입 자료형
    char cName = 65;
    cout << cName << endl;
    //  ㄴ원래 정수 자료형이였다 >> unsigned 가능!
    //  ㄴ하지만 문자 표현 자료형으로 사용(정수를 아스키 코드로 자동 변환)
    char ccName = 'a';
    //  ㄴ문자 하나만 표현!
    //  ㄴ아스키 코드표와 연동되어 0-127번에 해당하는 문자 값을 사용할 수있다.


    // 논리 자료형: 참과 거짓을 표현하기 위한 자료형
    bool bChoice = true; // 1은 true, 0은 false
    bool bbChoice = 0.1002; // double에서 bool로 짤리고 1(true)로 출력!
    //  ㄴbit만 필요하지만... 저장 최소단위는 1byte여서 


    // 변수의 특성
    //  ㄴ프로그램 흐름에서 값이 변할 수 있따
    int itest = 0;
    cout << itest << endl;
    itest = 10;
    cout << itest << endl;
    // 값 입력 받고 출력하기
    int input = 0;
    cin >> input;
    cout << input << endl;
}

// 숙제! 국 영 수 점수 입력하고 출력하는 프로그램 만들기

