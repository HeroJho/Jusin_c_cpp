#include <iostream>
#include <time.h>
using namespace std;

int main()
{
	// 게임은 규칙을 만드는 것!
	// 규칙을 발견하고, 만드는 능력은 굉장히 중요하다!
	// 반복문은 어떤 규칙을 반복한다는 말이다!

	// ******반복문은 코드를 작성하기 전에 설계(글로 논리를 짜고)를 하는 습관을 들이자!!*********


	// 반복문: 반복적인 코드를 생성하고 실행시키기 위해 사용하는 문법
	// while, do while, for

#pragma region while

	// 무한루프를 전제로 삼는 반복문 문법
	// 어떻게 반복을 멈추게 할 것인지를 항상 생각해야 한다
	//	ㄴwhile의 ()안의 조건이 만족하면 반복한다!!
	//	ㄴbreak : {}의 코드를 탈출 시킨다
	//  ㄴif문에 break 넣어서

	while (true) // 무한
	{
		cout << 1 << endl;
	}

	// ()보다는 안에 if문을 넣는 스타일로 자주 사용됨.
	// 조건을 세세하게 다룰 수 있기 때문
	int iScore = 3;
	while (true)
	{
		if (0 == iScore)
			break;
		cout << 1 << endl;
		iScore--;
	}

	// continue; : continue를 만나면 기존의 실행했던 코드의 첫 위치로 이동시킨다
	//	ㄴ반복문에만 사용할 수있는 키워드

#pragma endregion


#pragma region do-while문

	// while과 유사하다.
	// 무한루프를 전재로하고, 조건식이 아래쪽에 배치되어 있다.
	// 무조건 수행을 한 번 한다!
	do
	{
		cout << 1 << endl;
	} while (false);

#pragma endregion


#pragma region 난수(랜덤한 값)만들기

	// rand함수 : 0~32767범위에 사이 값을 무작위로 추출하는 함수
	//	ㄴ빌드를 할 때마다 같은 값을 뱉는다.
	//	ㄴ시드가 고정되어 있기 때문에 >> 빌드 할 때마다 시드(난수표)를 바꿔줘야 한다
	int iA = rand();
	cout << iA << endl;

	// srand함수 : rand함수의 seed을 변경하기 위한 함수
	//	ㄴ인자의 값에 따라 seed가 바뀐다.
	//	ㄴ시간은 계속 변하니 시간값으로 인자에 넣어 seed를 빌드할 때마다 변경해 준다.
	srand(2); // seed 2 난수표를 바꾼다

	// time함수 : 현재 시간을 초 단위로 불러오는 함수
	time_t temp = 0;
	time(&temp); // 현재시간을 초 단위로 변환

	// 빌드 될 때마다 시드가 바뀌는 코드 완성!
	srand(unsigned(time(NULL))); // NULL == 0
	//	ㄴ시드값이 음수 방지 >> unsigned

	// 하지만 여전히 시간에 따라 시드가 결정되기 때문에 어느정도 예상이 가능하다는 단점이 있다.

#pragma endregion


	//system("cls"); 콘솔 정리
	//system("pause"); 출력상태를 일시 정지하는 함수

}
// 숙제:
// 1. while문을 이용하여 2-9단까지 출력하기.

// 2. do while문을 이용해서 숫자를 입력받고, 짝수인 경우에만 합을 구하는 프로그램 만들기.

// 3. 자판기 구현하기 (while을 이용해서)
//	- 소지금 입력 받기
//	- 현재 소지금을 잔액 으로 표기하여 출력
//	- 메뉴가 출력, 1.콜라(100원) 2.사이다(200원) 3.환타(300원) 4.반환
//	- 선택에 의해 구매 시 잔액은 바뀌어야함
//	- 소지금이 부족할 겅우 구매는 불가능하고, 잔액이 부족합니다 출력
//	- 4번을 누르면 잔액은 --원입니다. 출력 후 프로그램을 총료.

// 4. 홀짝 게임 만들기
//  - 난수를 뽑아내서 그 숫자가 홀인지 짝인지 판별하는 게임
//  - 난수는 1-10까지 중 하나를 생성 (정답은 이미 보임)
//  - 1.홀수 2.짝수 3.종료
//  - 총 5라운드를 실시하여 마지막 라운드 종료시 몇 승 몇 패를 출력
//  - 매라운드마다 난수를 새로 뽑는다.
    

