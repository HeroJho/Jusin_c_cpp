#include <iostream>
#include <bitset> // 정수를 비트로 표현해주기 위해
using namespace std;

#pragma region 표기법

// 변수 이름 짓기 규칙
// 1.알파벳과 숫자로 구성된다.
//  ㄴ단 숫자가 알파벳보다 먼저 올 수 없다.
// 2.변수 명은 대소문자를 확실히 구분해야 한다.
// 3.프로그래밍에서 제공하는 기본 키워드로는 이름으로 지울 수 없다.
//  ㄴex) int namespace;
// 4. 공백 또는 특수 문자가 올 수 없다. 단, _는 허용
// 5. 같은 이름의 변수로 다시 선언할 수 없다.

// 변수 이름 짓기 관례!
// 1.헝가리 표기법: 변수 명 앞에 각 자료형을 상징하는 문자를 삽입하는 방식
//  ㄴex) int iTemp, float fTemp;
//  ㄴ나중에 코드가 길어질 때 밑 줄에서 어떤 자료형의 변수인지 까먹을 수 있어서...
//  ㄴ지금은 근데 변수 이름에 마우스를 호버링하면 무슨 자료형인지 뜬다.
//  ㄴ하지만 코드작성은 보수적이여서 많이 쓰고 있다.
// 2.카멜 표기법: 단어와 단어 사이를 대문자로 구분하는 방법
//  ㄴex) int playerHp;
// 3.파스칼 표기법: 변수명이 무조건 대문자로 시작, 복합어일 경우 중간에 시작하는 새로운 단어의 첫글자 대문자
//  ㄴex) int PlayerHp;
// 4.언더바 표기법: 단어와 단어 사이에 _를 사용, 주로 함수 매개 변수에 사용
//  ㄴex) void Func(int _iplayerHp)

#pragma endregion

#pragma region 연산자

// 프로그램의 흐름은 위 아래, 오른 왼으로 진행(대입 연산자의 진행)된다.

// 산술 연산자: +, -, *, /, %
//  ㄴ'/'는 몫, '%'는 나머지를 구한다

// sizeof 연산자: 자료형의 크기를 계산해주는 연산자 >> 바이트 단위로 반환한다.
//  ㄴcout << sizeof(char) << endl; 
//  ㄴ배열은 배열의 전체 크기를 반환한다

// 대입 연산자: =
//  ㄴ연산자를 기준으로 좌항과 우항의 자료형이 반드시 일치해야 한다.
//  ㄴ대입 연산자를 기준으로 오른쪽에 있는 데이터가 왼쪽으로 대입이 발생한다.

// 관계 연산자: 연산자를 기준으로 좌항과 우항의 결과를 판단하는 연산자
//  ㄴ <, >, <=, >=, ==, !=
//  ㄴ참, 거짓을 반환한다

// 논리 연산자: 연산자를 기준으로 좌항과 우항의 값의 상태에 따라 참 또는 거짓을 반환하는 연산자
//  ㄴ &&(and), ||(or), !(not)
//      ㄴand: 모두 참일 때 참 (이항)
//      ㄴor: 하나라도 참이면 참 (이항)
//      ㄴnot: 참을 거짓으로, 거짓을 참 (단항)

#pragma endregion


int main()
{
    char A = 'A';
    char B = 'B';
    cout << A + B << endl; // 4가 출력된다.
    //  ㄴchar은 결국 정수 더하기이기 때문에 임시 메모리에 4바이트로 할당하고 결과를 저장하기 때문

    int iTemp = 3.14f;
    // ㄴfloat은 지수부와 가수부로 나뉘는데 int는 정수만 저장한다.
    // ㄴ즉, 지수부가 짤리게 된다. >> 자료형을 일치 한 상태에서 대입 연산자를 하자!

    // 관계 연산자
    int num1 = 10, num2 = 20;
    cout << (num1 < num2) << endl;
    cout << (num1 > num2) << endl;
    cout << (num1 <= num2) << endl;
    cout << (num1 >= num2) << endl;
    cout << (num1 == num2) << endl;
    cout << (num1 != num2) << endl;

#pragma region 비트 연산자

    // &(and), |(or), ~(not), ^(xor)
    //  ㄴxor: 다르면 1
    int ittemp1 = 10;
    int ittemp2 = 13;
    // <몇 비트로 표기할 것인가>
    cout << bitset<8>(ittemp1) << endl;
    cout << bitset<8>(ittemp1 & ittemp2) << endl;

    // 컴퓨터는 -라는 개념이 없다
    // 10진수는 7의 보수는 3 (자릿수 변경 기준)
    // 2진수는 무조건 1이 보수
    // (10-10이라면)컴퓨터는 어떤값을 더해서 비트를 전부 0으로 만드는 식으로 빼기를 함
    // 1의보수 하고 2의보수(1 더함)    

    // 제일 왼쪽 비트는 부호비트로 사용된다.


#pragma endregion

}

// 숙제: 10~20숫자를 2진수 <->10진수 변환 (종이에 써서)
// 총점 평균도 구해서 출력하기
