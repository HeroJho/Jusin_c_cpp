#include <iostream>
using namespace std;

void main()
{
	// 배열은 포인터의 연장선으로 보기!!
	// what is array?
	// 같은 자료형의 타입으로 여러 변수를 선언하고자 할 때, 같은 이름을 묶어서 선언하기 위한 문법
	
	// 자료형  배열이름  []:인덱스 연산자   10: 배열의 개수
	int iArray[10];   // 배열의 선언

	{
		int iTemp = 0;
		int iSour = 0;
		int iDest = 0;

		int iArray[3] = {0};   // 0으로 초기화
		// {} : 블록 단위 데이터

		for (int i = 0; i < 3; ++i)
			cout << iArray[i] << endl;

		// 배열의 특징
		// 0. 배열의 이름은 배열 전체 메모리의 첫 번째 주소 값이다.
		{
			int iArray[3] = { 0 };
			cout << iArray << endl;
			// 즉 []는 배열의 이름과 +연산을 하겠다는 것이다.
			// 배열의 이름 == int* const p 이다!!
			// 즉 배열의 이름은 포인터는 아니다!! 읽기 전용이다!
			// iArray++; // iArray는 포인터 변수가 아니다!! ++ 연산 불가능

			// 하지만 응용을 하면
			int* p = iArray;
			cout << p[0] << endl;
			cout << p++ << endl;   // 이처럼 ++연산이 가능하다

		}
		// 1. 배열은 일반적인 변수와는 다르게 연속된 메모리 공간에 저장이 된다.
        //     ㄴ그러므로 포인터 연산을 해서 배열 요소들에 접근할 수 있다.
		// 2. 배열을 선언할 때 []연산자안에는 반드시 상수를 사용해야 한다.
		//     ㄴ배열은 갯수를 알려줘야지만 쓸 수 있는 문법이다. 태생적으로 그런 문법!
		//     ㄴ그 갯수가 변수일 수는 없다. 상수만!
		//     ㄴconst를 붙여 상수를 만든 변수는 가능하다!
		// 3. 배열은 블록 단위 데이터이며, 중괄호식을 이용하여 값을 초기화할 수 있다.
		//		ㄴ{}안에 인덱스 순서대로 초기화
		//		ㄴ초기화 값이 비는 경우 자동으로 0으로 초기화한다.
		{
			int iArray[3] = { 0, 1, 2 };
			int iiArray[3] = { };   // 0으로 전부 초기화!
		}
		// 4. 선언에서 []연산자 안에 배열의 개수를 알려주지 않아도, 초기화 하는 값이 있으면 컴파일러가 판단해서 알아서 만들어줌
		{
			int iArray[] = { 1, 2, 3 }; // 권장 x
		}
		// 5. 배열을 선언이 아닌 사용하는 시점에는 []안에 변수를 사용할 수 있다.
		//		ㄴ단, 배열의 개수 안에서 사용해야한다.
		{
			for (int i = 0; i < 3; ++i)
				iArray[i] = i;
		}
		
		// 6. 배열은 대괄호 연산자 안에서 연산을 허용한다.
		{
			int iArray[] = { 1, 2, 3 };
			cout << iArray[1 + 1] << endl;
		}
		// 7. 배열끼리 연산도 가능하다
		{
			int iArray[] = { 1, 2, 3 };
			cout << iArray[0] + iArray[1] << endl;
		}
		// 8. 배열의 이름을 sizeof연산자로 계산할 경우 배열의 전체 크기를 알 수 있따.
		{
			int iArray[3] = {};
			cout << sizeof(iArray) << endl;  // 12
			cout << sizeof(iArray) / sizeof(int) << endl; // 12/4 = 3개의 배열을 선언했구나!
		}
		// 9. 

	}
}

// 숙제 : 자판기를 포인터를 사용해서 구현해 보기

// 2중 for문과 배열을 이용하여 다음처럼 출력해라
// 1  2  3  4  5 
// 6  7  8  9  10
// 11 12 13 14 15
// 16 17 18 19 20
// 21 22 23 24 25

// 로또 만들기
// - 배열을 이용하여 1-45사이의 수중 무작위로 6개 숫자를 5회 출력
// - 같은 회차에서는 절대 중복 번호가 나올 수 없음, 오름차순 정렬(버블 정렬)

// 야구 게임
// - 1-9까지 무작위 숫자를 3개를 추출
// - 정렬은 안한다
// - 입력하는 숫자와 무작위 숫자의 값과 자리가 일치하면 스트라이크, 값만 일치하면 볼
// - 매 회 입력 후 몇 스트라이크 몇 볼 출력한다
// - 3스트라이크가 나오면 게임 승리
// - 9라운드까지 진행, 3스트라이크를 못만들면 패배
// ex)
// 정답		2	8	5
// 1회차:	1	2	3 -> 1볼
// 2회차:	2	4	6 -> 1스트라이크
// 3회차:	2	5	6 -> 1스트라이크 1볼
// 4회차:	2	5	8 -> 1스트라이크 2볼
// 5회차:	5	2	8 -> 3볼